<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control de Asistencia</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            overflow: hidden;
        }
        
        .header {
            background: #4a5568;
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #4a5568;
            font-weight: 500;
            font-size: 14px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }
        
        .btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: #718096;
        }
        
        .btn-secondary:hover {
            background: #4a5568;
        }
        
        .status {
            text-align: center;
            padding: 20px;
            background: #f7fafc;
            border-radius: 8px;
            margin-top: 20px;
            border: 1px solid #e2e8f0;
        }
        
        .status.success {
            background: #f0fff4;
            border-color: #c6f6d5;
            color: #2f855a;
        }
        
        .status.error {
            background: #fff5f5;
            border-color: #feb2b2;
            color: #c53030;
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            color: #718096;
            font-size: 12px;
            background: #f7fafc;
            border-top: 1px solid #e2e8f0;
        }
        
        .hidden {
            display: none;
        }
        
        .actions {
            display: flex;
            gap: 10px;
        }
        
        .actions button {
            flex: 1;
        }
        
        .instructions {
            background: #ebf8ff;
            border: 1px solid #90cdf4;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #2b6cb0;
        }
        
        .instructions ul {
            margin-left: 20px;
            margin-top: 10px;
        }
        
        .instructions li {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Control de Asistencia</h1>
            <p>Sistema de registro de entrada y salida</p>
        </div>
        
        <div class="content">
            <div class="instructions">
                <strong>Para implementar en GitHub Pages:</strong>
                <ul>
                    <li>1. Guarda este código como <code>index.html</code></li>
                    <li>2. Crea un repositorio en GitHub</li>
                    <li>3. Sube el archivo al repositorio</li>
                    <li>4. Habilita GitHub Pages en la configuración</li>
                    <li>5. Accede a través de <code>tuusuario.github.io/nombrerepo</code></li>
                </ul>
            </div>
            
            <div id="loginForm">
                <div class="form-group">
                    <label for="email">Correo Electrónico</label>
                    <input type="email" id="email" class="form-control" placeholder="ejemplo@empresa.com" required>
                </div>
                
                <button id="checkInBtn" class="btn">Registrar Entrada</button>
                <button id="checkOutBtn" class="btn btn-secondary">Registrar Salida</button>
                
                <div id="statusMessage" class="status hidden"></div>
            </div>
            
            <div id="adminPanel" class="hidden">
                <div class="status success">
                    <h3>Panel de Administración</h3>
                    <p>Registro de asistencia completado</p>
                </div>
                
                <div class="actions">
                    <button id="downloadBtn" class="btn">Descargar Excel</button>
                    <button id="clearBtn" class="btn btn-secondary">Limpiar Datos</button>
                </div>
            </div>
        </div>
        
        <div class="footer">
            Sistema de control de asistencia © <span id="year"></span>
        </div>
    </div>

    <script>
        // Set current year
        document.getElementById('year').textContent = new Date().getFullYear();
        
        // Get elements
        const emailInput = document.getElementById('email');
        const checkInBtn = document.getElementById('checkInBtn');
        const checkOutBtn = document.getElementById('checkOutBtn');
        const downloadBtn = document.getElementById('downloadBtn');
        const clearBtn = document.getElementById('clearBtn');
        const statusMessage = document.getElementById('statusMessage');
        const loginForm = document.getElementById('loginForm');
        const adminPanel = document.getElementById('adminPanel');
        
        // Store attendance records
        let attendanceRecords = [];
        
        // Load records from GitHub Gist (simulated - in real implementation you'd use actual API)
        function loadRecords() {
            try {
                // In a real implementation, you would fetch from a GitHub Gist or external storage
                const saved = localStorage.getItem('attendanceRecords');
                if (saved) {
                    attendanceRecords = JSON.parse(saved);
                }
            } catch (error) {
                attendanceRecords = [];
            }
            updateAdminPanel();
        }
        
        // Save records 
        function saveRecords() {
            localStorage.setItem('attendanceRecords', JSON.stringify(attendanceRecords));
            updateAdminPanel();
        }
        
        // Format date and time
        function formatDateTime(date) {
            return {
                date: date.toLocaleDateString('es-ES'),
                time: date.toLocaleTimeString('es-ES'),
                timestamp: date.toISOString()
            };
        }
        
        // Show status message
        function showStatus(message, type = 'success') {
            statusMessage.textContent = message;
            statusMessage.className = `status ${type}`;
            statusMessage.classList.remove('hidden');
            
            setTimeout(() => {
                statusMessage.classList.add('hidden');
            }, 3000);
        }
        
        // Check if user already has a record for today
        function getUserTodayRecord(email) {
            const today = new Date().toLocaleDateString('es-ES');
            return attendanceRecords.find(record => 
                record.email.toLowerCase() === email.toLowerCase() && 
                record.checkIn.date === today
            );
        }
        
        // Register check-in
        checkInBtn.addEventListener('click', () => {
            const email = emailInput.value.trim();
            
            if (!email) {
                showStatus('Por favor ingrese su correo electrónico', 'error');
                return;
            }
            
            if (!validateEmail(email)) {
                showStatus('Por favor ingrese un correo electrónico válido', 'error');
                return;
            }
            
            const existingRecord = getUserTodayRecord(email);
            
            if (existingRecord && existingRecord.checkOut) {
                showStatus('Ya ha completado su jornada laboral hoy', 'error');
                return;
            }
            
            if (existingRecord && !existingRecord.checkOut) {
                showStatus('Ya ha registrado su entrada hoy', 'error');
                return;
            }
            
            const now = new Date();
            const dateTime = formatDateTime(now);
            
            const newRecord = {
                email: email.toLowerCase(),
                checkIn: dateTime,
                checkOut: null,
                id: Date.now()
            };
            
            attendanceRecords.push(newRecord);
            saveRecords();
            
            showStatus('Entrada registrada correctamente');
            emailInput.value = '';
        });
        
        // Register check-out
        checkOutBtn.addEventListener('click', () => {
            const email = emailInput.value.trim();
            
            if (!email) {
                showStatus('Por favor ingrese su correo electrónico', 'error');
                return;
            }
            
            if (!validateEmail(email)) {
                showStatus('Por favor ingrese un correo electrónico válido', 'error');
                return;
            }
            
            const record = getUserTodayRecord(email);
            
            if (!record) {
                showStatus('No se encontró registro de entrada para hoy', 'error');
                return;
            }
            
            if (record.checkOut) {
                showStatus('Ya ha registrado su salida hoy', 'error');
                return;
            }
            
            const now = new Date();
            const dateTime = formatDateTime(now);
            
            record.checkOut = dateTime;
            saveRecords();
            
            showStatus('Salida registrada correctamente');
            emailInput.value = '';
        });
        
        // Download Excel
        downloadBtn.addEventListener('click', () => {
            if (attendanceRecords.length === 0) {
                showStatus('No hay registros para descargar', 'error');
                return;
            }
            
            // Prepare data for Excel
            const data = attendanceRecords.map(record => ({
                'Correo Electrónico': record.email,
                'Fecha de Entrada': record.checkIn.date,
                'Hora de Entrada': record.checkIn.time,
                'Fecha de Salida': record.checkOut ? record.checkOut.date : 'No registrado',
                'Hora de Salida': record.checkOut ? record.checkOut.time : 'No registrado',
                'Duración': record.checkOut ? calculateDuration(record.checkIn.timestamp, record.checkOut.timestamp) : 'En curso'
            }));
            
            // Create worksheet
            const ws = XLSX.utils.json_to_sheet(data);
            
            // Create workbook
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Asistencia");
            
            // Generate file name with current date
            const date = new Date();
            const fileName = `registro_asistencia_${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}.xlsx`;
            
            // Download
            XLSX.writeFile(wb, fileName);
            
            showStatus('Archivo descargado correctamente');
        });
        
        // Clear all data
        clearBtn.addEventListener('click', () => {
            if (confirm('¿Está seguro de que desea eliminar todos los registros? Esta acción no se puede deshacer.')) {
                attendanceRecords = [];
                saveRecords();
                showStatus('Todos los registros han sido eliminados');
            }
        });
        
        // Validate email
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }
        
        // Calculate duration between two timestamps
        function calculateDuration(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const diffMs = endDate - startDate;
            const diffHrs = Math.floor(diffMs / 3600000);
            const diffMins = Math.floor((diffMs % 3600000) / 60000);
            return `${diffHrs}h ${diffMins}m`;
        }
        
        // Update admin panel visibility
        function updateAdminPanel() {
            if (attendanceRecords.length > 0) {
                adminPanel.classList.remove('hidden');
            } else {
                adminPanel.classList.add('hidden');
            }
        }
        
        // Initialize
        loadRecords();
    </script>
</body>
</html><!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control de Asistencia</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            overflow: hidden;
        }
        
        .header {
            background: #4a5568;
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #4a5568;
            font-weight: 500;
            font-size: 14px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }
        
        .btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: #718096;
        }
        
        .btn-secondary:hover {
            background: #4a5568;
        }
        
        .status {
            text-align: center;
            padding: 20px;
            background: #f7fafc;
            border-radius: 8px;
            margin-top: 20px;
            border: 1px solid #e2e8f0;
        }
        
        .status.success {
            background: #f0fff4;
            border-color: #c6f6d5;
            color: #2f855a;
        }
        
        .status.error {
            background: #fff5f5;
            border-color: #feb2b2;
            color: #c53030;
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            color: #718096;
            font-size: 12px;
            background: #f7fafc;
            border-top: 1px solid #e2e8f0;
        }
        
        .hidden {
            display: none;
        }
        
        .actions {
            display: flex;
            gap: 10px;
        }
        
        .actions button {
            flex: 1;
        }
        
        .instructions {
            background: #ebf8ff;
            border: 1px solid #90cdf4;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #2b6cb0;
        }
        
        .instructions ul {
            margin-left: 20px;
            margin-top: 10px;
        }
        
        .instructions li {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Control de Asistencia</h1>
            <p>Sistema de registro de entrada y salida</p>
        </div>
        
        <div class="content">
            <div class="instructions">
                <strong>Para implementar en GitHub Pages:</strong>
                <ul>
                    <li>1. Guarda este código como <code>index.html</code></li>
                    <li>2. Crea un repositorio en GitHub</li>
                    <li>3. Sube el archivo al repositorio</li>
                    <li>4. Habilita GitHub Pages en la configuración</li>
                    <li>5. Accede a través de <code>tuusuario.github.io/nombrerepo</code></li>
                </ul>
            </div>
            
            <div id="loginForm">
                <div class="form-group">
                    <label for="email">Correo Electrónico</label>
                    <input type="email" id="email" class="form-control" placeholder="ejemplo@empresa.com" required>
                </div>
                
                <button id="checkInBtn" class="btn">Registrar Entrada</button>
                <button id="checkOutBtn" class="btn btn-secondary">Registrar Salida</button>
                
                <div id="statusMessage" class="status hidden"></div>
            </div>
            
            <div id="adminPanel" class="hidden">
                <div class="status success">
                    <h3>Panel de Administración</h3>
                    <p>Registro de asistencia completado</p>
                </div>
                
                <div class="actions">
                    <button id="downloadBtn" class="btn">Descargar Excel</button>
                    <button id="clearBtn" class="btn btn-secondary">Limpiar Datos</button>
                </div>
            </div>
        </div>
        
        <div class="footer">
            Sistema de control de asistencia © <span id="year"></span>
        </div>
    </div>

    <script>
        // Set current year
        document.getElementById('year').textContent = new Date().getFullYear();
        
        // Get elements
        const emailInput = document.getElementById('email');
        const checkInBtn = document.getElementById('checkInBtn');
        const checkOutBtn = document.getElementById('checkOutBtn');
        const downloadBtn = document.getElementById('downloadBtn');
        const clearBtn = document.getElementById('clearBtn');
        const statusMessage = document.getElementById('statusMessage');
        const loginForm = document.getElementById('loginForm');
        const adminPanel = document.getElementById('adminPanel');
        
        // Store attendance records
        let attendanceRecords = [];
        
        // Load records from GitHub Gist (simulated - in real implementation you'd use actual API)
        function loadRecords() {
            try {
                // In a real implementation, you would fetch from a GitHub Gist or external storage
                const saved = localStorage.getItem('attendanceRecords');
                if (saved) {
                    attendanceRecords = JSON.parse(saved);
                }
            } catch (error) {
                attendanceRecords = [];
            }
            updateAdminPanel();
        }
        
        // Save records 
        function saveRecords() {
            localStorage.setItem('attendanceRecords', JSON.stringify(attendanceRecords));
            updateAdminPanel();
        }
        
        // Format date and time
        function formatDateTime(date) {
            return {
                date: date.toLocaleDateString('es-ES'),
                time: date.toLocaleTimeString('es-ES'),
                timestamp: date.toISOString()
            };
        }
        
        // Show status message
        function showStatus(message, type = 'success') {
            statusMessage.textContent = message;
            statusMessage.className = `status ${type}`;
            statusMessage.classList.remove('hidden');
            
            setTimeout(() => {
                statusMessage.classList.add('hidden');
            }, 3000);
        }
        
        // Check if user already has a record for today
        function getUserTodayRecord(email) {
            const today = new Date().toLocaleDateString('es-ES');
            return attendanceRecords.find(record => 
                record.email.toLowerCase() === email.toLowerCase() && 
                record.checkIn.date === today
            );
        }
        
        // Register check-in
        checkInBtn.addEventListener('click', () => {
            const email = emailInput.value.trim();
            
            if (!email) {
                showStatus('Por favor ingrese su correo electrónico', 'error');
                return;
            }
            
            if (!validateEmail(email)) {
                showStatus('Por favor ingrese un correo electrónico válido', 'error');
                return;
            }
            
            const existingRecord = getUserTodayRecord(email);
            
            if (existingRecord && existingRecord.checkOut) {
                showStatus('Ya ha completado su jornada laboral hoy', 'error');
                return;
            }
            
            if (existingRecord && !existingRecord.checkOut) {
                showStatus('Ya ha registrado su entrada hoy', 'error');
                return;
            }
            
            const now = new Date();
            const dateTime = formatDateTime(now);
            
            const newRecord = {
                email: email.toLowerCase(),
                checkIn: dateTime,
                checkOut: null,
                id: Date.now()
            };
            
            attendanceRecords.push(newRecord);
            saveRecords();
            
            showStatus('Entrada registrada correctamente');
            emailInput.value = '';
        });
        
        // Register check-out
        checkOutBtn.addEventListener('click', () => {
            const email = emailInput.value.trim();
            
            if (!email) {
                showStatus('Por favor ingrese su correo electrónico', 'error');
                return;
            }
            
            if (!validateEmail(email)) {
                showStatus('Por favor ingrese un correo electrónico válido', 'error');
                return;
            }
            
            const record = getUserTodayRecord(email);
            
            if (!record) {
                showStatus('No se encontró registro de entrada para hoy', 'error');
                return;
            }
            
            if (record.checkOut) {
                showStatus('Ya ha registrado su salida hoy', 'error');
                return;
            }
            
            const now = new Date();
            const dateTime = formatDateTime(now);
            
            record.checkOut = dateTime;
            saveRecords();
            
            showStatus('Salida registrada correctamente');
            emailInput.value = '';
        });
        
        // Download Excel
        downloadBtn.addEventListener('click', () => {
            if (attendanceRecords.length === 0) {
                showStatus('No hay registros para descargar', 'error');
                return;
            }
            
            // Prepare data for Excel
            const data = attendanceRecords.map(record => ({
                'Correo Electrónico': record.email,
                'Fecha de Entrada': record.checkIn.date,
                'Hora de Entrada': record.checkIn.time,
                'Fecha de Salida': record.checkOut ? record.checkOut.date : 'No registrado',
                'Hora de Salida': record.checkOut ? record.checkOut.time : 'No registrado',
                'Duración': record.checkOut ? calculateDuration(record.checkIn.timestamp, record.checkOut.timestamp) : 'En curso'
            }));
            
            // Create worksheet
            const ws = XLSX.utils.json_to_sheet(data);
            
            // Create workbook
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Asistencia");
            
            // Generate file name with current date
            const date = new Date();
            const fileName = `registro_asistencia_${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}.xlsx`;
            
            // Download
            XLSX.writeFile(wb, fileName);
            
            showStatus('Archivo descargado correctamente');
        });
        
        // Clear all data
        clearBtn.addEventListener('click', () => {
            if (confirm('¿Está seguro de que desea eliminar todos los registros? Esta acción no se puede deshacer.')) {
                attendanceRecords = [];
                saveRecords();
                showStatus('Todos los registros han sido eliminados');
            }
        });
        
        // Validate email
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }
        
        // Calculate duration between two timestamps
        function calculateDuration(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const diffMs = endDate - startDate;
            const diffHrs = Math.floor(diffMs / 3600000);
            const diffMins = Math.floor((diffMs % 3600000) / 60000);
            return `${diffHrs}h ${diffMins}m`;
        }
        
        // Update admin panel visibility
        function updateAdminPanel() {
            if (attendanceRecords.length > 0) {
                adminPanel.classList.remove('hidden');
            } else {
                adminPanel.classList.add('hidden');
            }
        }
        
        // Initialize
        loadRecords();
    </script>
</body>
</html>
